swagger: '2.0'
info:
  title: Sample API
  description: A simple API for testing OpenAPI schemas.
  version: 1.0.0
host: api.example.com
basePath: /v1
schemes:
  - https
paths:
  /users:
    get:
      summary: Get a list of users
      description: Returns a list of users.
      parameters:
        - name: limit
          in: query
          required: false
          description: The maximum number of users to return.
          type: integer
          minimum: 1
          default: 10
        - name: offset
          in: query
          required: false
          description: The number of users to skip before starting to collect the result set.
          type: integer
          minimum: 0
          default: 0
      responses:
        200:
          description: A list of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      summary: Create a new user
      description: Adds a new user to the system.
      parameters:
        - name: body
          in: body
          required: true
          description: User object to create
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: User created successfully.
  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieves a user by their ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          type: string
      responses:
        200:
          description: A single user.
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found.
  /users/{userId}/resources:
    get:
      summary: Get resources for a user
      description: Retrieves a list of resources associated with the user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          type: string
        - name: type
          in: query
          required: false
          description: Filter resources by type.
          type: string
      responses:
        200:
          description: A list of resources.
          schema:
            type: array
            items:
              $ref: '#/definitions/Resource'
    post:
      summary: Create a new resource for a user
      description: Adds a new resource to the user's collection.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          type: string
        - name: body
          in: body
          required: true
          description: Resource object to create
          schema:
            $ref: '#/definitions/Resource'
      responses:
        201:
          description: Resource created successfully.
  /users/{userId}/resources/{resourceId}:
    get:
      summary: Get a specific resource for a user
      description: Retrieves details of a specific resource associated with the user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          type: string
        - name: resourceId
          in: path
          required: true
          description: ID of the resource
          type: string
      responses:
        200:
          description: Resource details.
          schema:
            $ref: '#/definitions/Resource'
        404:
          description: Resource not found.
    delete:
      summary: Delete a specific resource for a user
      description: Deletes a resource associated with the user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          type: string
        - name: resourceId
          in: path
          required: true
          description: ID of the resource
          type: string
      responses:
        204:
          description: Resource deleted successfully.
definitions:
  User:
    type: object
    properties:
      id:
        type: string
        description: The unique identifier for the user.
      name:
        type: string
        description: The name of the user.
      email:
        type: string
        format: email
        description: The email of the user.
      age:
        type: integer
        description: The age of the user.
        minimum: 0
  Resource:
    type: object
    properties:
      id:
        type: string
        description: The unique identifier for the resource.
      type:
        type: string
        description: The type of the resource.
      attributes:
        type: object
        description: Additional attributes of the resource.
