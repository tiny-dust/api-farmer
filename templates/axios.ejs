<% if (ts && !typesOnly) { %> import type { RequestConfig } from '@/request' <% } %>
<% if (!typesOnly) { %> import { request } from '@/request' <% } %>
<% if (ts) { %> import { type paths } from './<%- typesFilename %>' <% } %>

<%_ if (!typesOnly) { _%>
  <% apiModule.payloads.forEach(payload => { %> %>
    <%- payload.comment %>
    export const <%- payload.fn %> = 
      (config<% if (ts) { %>: RequestConfig<<%- payload.typeQuery %>, <%- payload.typeRequestBody %>> <% } %> = {}) => request
        <% if (ts) { %><<%- payload.typeResponseBody %>><% } %>({
          url: '<%- payload.url %>', 
          method: '<%- payload.method %>',
          ...config,
          <%_ if (payload.requestContentType && payload.requestContentType !== 'application/json') { _%>
          headers: {
            'Content-Type': '<%- payload.requestContentType %>',
            ...config.headers,
          }
        <% } %>
        })
  <% }) %>
<%_ } _%>

<% if (ts) { %>
  <% apiModule.payloads.forEach(payload => { %> %>
    export type <%- payload.type %> = <%- payload.typeValue %>

  <% }) %>

  <% apiModule.payloads.forEach(payload => { %> %>
    <% if (payload.typeQueryValue) { %>
      export type <%- payload.typeQuery %> = <%- payload.typeQueryValue %>
    
    <% } %>
  <% }) %>

  <% apiModule.payloads.forEach(payload => { %> %>
    <% if (payload.typeRequestBodyValue) { %>
      export type <%- payload.typeRequestBody %> = <%- payload.typeRequestBodyValue %>

    <% } %>
  <% }) %>

  <% apiModule.payloads.forEach(payload => { %> %>
    <% if (payload.typeResponseBodyValue) { %>
      export type <%- payload.typeResponseBody %> = <%- payload.typeResponseBodyValue %>
      
    <% } %>
  <% }) %>
<% } %>

